<% 	
	var viewportWidth = appWidth;
	var viewportHeight = appHeight;

	var map = sector.map;
%>

<script>

	function getStarType(id) {
		var starTypes = <%= JSON.stringify(config.starmap.starTypes) %>;
		for (var i in starTypes) {
			if (starTypes[i].id == id) {
				return starTypes[i];
			}
		}
		return null;
	}

	function Star(data, faction, isCapital, fleet, starRingRadius, starInnerRingRadius, linkWidth, useImage, drawImmediately, graphics)
	{
		this.data = data;
		this.useImage = useImage;
		this.starRingRadius = starRingRadius;
		this.starInnerRingRadius = starInnerRingRadius;
		this.linkWidth = linkWidth;
		this.starObj = null;
		this.ringObjs = [];
		this.faction = faction;
		this.isCapital = isCapital;
		this.fleet = fleet;
		this.graphics = graphics;

		this.data.type = getStarType(data.type);

		this.getFactionColor = function() {
			return (this.faction != null) ? this.faction.color : 'FFFFFF';
		}

		this.getFactionName = function() {
			return (this.faction != null) ? this.faction.fName : 'none';
		}

		function selectStarBridge(item, pointer)
		{
			starMap.selectStar(item.gameObject, pointer);
		}

		this.drawStar = function() {
			if (this.useImage) {
				this.starObj = drawSprite(phaserGame, data.pos.x, data.pos.y, data.type.id, {scale:0.1, gameObject:this}, selectStarBridge);	
			}
			else {
			    this.starObj = new Phaser.Circle(data.pos.x, data.pos.y, data.type.radius);
			    this.starObj.gameObject = this;
			    phaserGame.debug.geom(this.starObj, data.type.color);
			}
		}

		this.drawRing = function() {
			var color = this.getFactionColor();

			var outerRing = drawSprite(phaserGame, data.pos.x, data.pos.y, 'gear8', {scale:0.075, color:color, gameObject:this}, selectStarBridge);
			this.ringObjs.push(outerRing);

		    if (this.isCapital) {
				this.drawCapitalRing();
			}
			else {

				var innerRing = drawSprite(phaserGame, data.pos.x, data.pos.y, 'ring', {scale:0.05, color:color, gameObject:this}, selectStarBridge);
				this.ringObjs.push(innerRing);
			}
		}

		this.drawCapitalRing = function() {
			var count = 8;
			var twoPI = 2 * Math.PI;
			var inc = twoPI / count;

			var color = this.getFactionColor();

			for (var angle=0; angle<twoPI; angle+=inc) {
				var x = data.pos.x + this.starInnerRingRadius * Math.cos(angle);
				var y = data.pos.y + this.starInnerRingRadius * Math.sin(angle);
				
				var subStar = drawSprite(phaserGame, x, y, 'star', {scale:0.011, color:color, gameObject:this}, selectStarBridge);
				this.ringObjs.push(subStar);
			}
		}

		this.selectedUpdate = function() {
			for (var i in this.ringObjs) {
				this.ringObjs[i].angle += 1;
			}
		}

		this.contains = function(point) {
			if (this.starObj.contains(point)) {
				return true;
			}
			for (var i in this.ringObjs) {
				if (this.ringObjs[i].contains(point)) {
					return true;
				}
			}
			return false;
		}

		if (drawImmediately) {
			this.drawStar();
			this.drawRing();
		}

		return this;
	}

	function StarMap()
	{
		var map = <%= JSON.stringify(map) %>;
		var factionSectors = <%= JSON.stringify(factionSectors) %>;

		this.sid = <%= sector.sid %>;
		this.linkWidth = 3;
		this.starRingRadius = 30;
		this.starInnerRingRadius = 23;
		this.fleetOrbitRadius = 50;
		this.mapRender = { stars:[], links:[], fleets:[], bases:[] };
		this.selectedStar = null;
		this.selectionCursor = null;

		//Input
		this.wasTouching = false;
	    this.lastTouchX = 0;
	    this.lastTouchY = 0;
	    this.selectMode = 'select';

	    this.circleMenu = null;

		this.graphics = phaserGame.add.graphics(0, 0);

		function getPoints(posA, posB, ringRadius) {

			var dirV = normalizeVector2( diffVector2(posA, posB) );
			var multiplier = ringRadius;
		
			var points = [];
			points.push( diffVector2(posA, multVector2(multiplier, dirV)) );
			points.push( sumVector2(posB, multVector2(multiplier, dirV)) );
			return points;
		}

		function findOwnerFaction(starId) {
			for (var i in factionSectors) {
				if (factionSectors[i].controlled[starId]) {
					return factionSectors[i];
				}
			}
			return null;
		}

		function isFactionCapital(starId) {
			for (var i in factionSectors) {
				if (factionSectors[i].controlled[starId]) {
					return factionSectors[i].controlled[starId].capital;
				}
			}
			return false;
		}

		function isStarsLinked(starA, starB) {
			for (var i in map.links) {
				var starA_id = map.links[i][0];
				var starB_id = map.links[i][1];
				if ((starA_id == starA.data.id) && (starB_id == starB.data.id)) {
					return true;
				}
				else if ((starA_id == starB.data.id) && (starB_id == starA.data.id)) {
					return true;
				}
			}
			return false;
		}

		for (var i in map.links) {
			var starA_id = map.links[i][0];
			var starB_id = map.links[i][1];
			//Fix these, never rely on id order.
			var starA = map.stars[starA_id-1];
			var starB = map.stars[starB_id-1];
			var factionA = findOwnerFaction(starA.id);
			var factionB = findOwnerFaction(starB.id);

			var points = getPoints(starA.pos, starB.pos, this.starRingRadius);

			var color = (factionA && (factionA == factionB)) ? factionA.color : 'FFFFFF';

			/*var link = new Path.Line({
			    from: [points[0].x, points[0].y],
			    to: [points[1].x, points[1].y],
			    strokeColor: color,
			    strokeWidth: this.linkWidth
			});*/

			this.graphics.lineStyle(this.linkWidth, parseInt(color, 16));
    		this.graphics.moveTo(points[0].x, points[0].y);
    		this.graphics.lineTo(points[1].x, points[1].y);
		}

		for (var i in map.stars) {
			var data = map.stars[i];
			var faction = findOwnerFaction(data.id);
			var isCapital = isFactionCapital(data.id);

			var useSprites = true;
			var drawImmediately = true;
			var star = new Star(	data, faction, isCapital, null, this.starRingRadius, 
									this.starInnerRingRadius, this.linkWidth, useSprites, drawImmediately, this.graphics);
		    this.mapRender.stars.push(star);
		}

		this.selectStar = function(star, pointer) {

			//Special Select modes
			if (this.selectMode == 'movefleet') {
	 			if (this.selectedStar && this.selectedFleet && (this.selectedFleet.mode == 'orbit') && isStarsLinked(this.selectedStar, star)) {
					this.requestWarpFleet(this.selectedFleet, this.selectedStar, star);
					this.selectedFleet = null;
					this.selectMode = 'select';
					this.closeMenu();
				}
				return;
			}


			if (this.selectedStar && (this.selectedStar == star)) {
				this.openMenu(this.selectedStar, this.selectedFleet);
				return;
			}
			this.closeMenu();

			this.moveCameraTo(star.data.pos.x, star.data.pos.y);

			this.selectedStar = star;
			var type = star.data.type;
			//{name:'yellow', color:'yellow', radius:10, img:'/game/starmap/Sun.png'},

			this.selectedFleet = null;
			for (var i in this.mapRender.fleets) {
				var fleet = this.mapRender.fleets[i];
				if ((fleet.star == star) && fleet.isLocal) {
					this.selectedFleet = fleet;
					break;
				}
			}

			/*$('#object-details').empty();
			var html = "";
			html += "<div class='row'><div class='col-md-12'><img src='" + type.img + "'/></div></div>";
			html += "<div class='row'><div class='col-md-12'><b>" + star.data.name + "</b></div></div>";
			html += "<div class='row'><div class='col-md-4'><b>Class:</b></div>";
			html += "<div class='col-md-8'>" + type.name + "</div></div>";
			html += "<div class='row'><div class='col-md-4'><b>Faction:</b></div>";
			html += "<div class='col-md-8'>" + star.getFactionName() + " " + (star.isCapital ? "Capital" : "") + "</div></div>";
			if (this.selectedFleet) {
				html += "<div class='row'><div class='col-md-4'><b>Fleet:</b></div>";
				html += "<div class='col-md-8'>" + this.selectedFleet.data.ships[0] + "</div></div>";
			}
			$('#object-details').html( html );

			$('#object-details-panel').removeClass("collapse");*/

			if (this.selectionCursor == null) {
				/*this.selectionCursor = new Path.Circle({
			        center: new Point(star.data.pos.x, star.data.pos.y),
			        radius: this.starRingRadius+4,
			        strokeColor: 'cyan',
			        strokeWidth: this.linkWidth,
			        dashArray: [6, 4],
			    });*/
			}
			else {
				//this.selectionCursor.position = new Point(star.data.pos.x, star.data.pos.y);
			}
		}

		function setMoveMode(item, pointer) {
			//item.alpha = 1.0;
			phaserGame.add.tween(item).to({ alpha:1.0 }, 300, Phaser.Easing.Quadratic.InOut, true);
			starMap.selectMode = 'movefleet';
		}

		this.addMenuItem = function(text, cb, radius, x, y, finalX, finalY) {
			var item = drawSprite(phaserGame, x, y, 'hex', {scale:0.001, color:'2980B9', alpha:0.4, gameObject:this}, cb);
			var item = drawSprite(phaserGame, x, y, 'outlineHex', {scale:0.001, color:'2980B9', gameObject:this}, cb);

			phaserGame.add.tween(item).to({ x:finalX, y:finalY }, 500, Phaser.Easing.Quadratic.InOut, true);
			phaserGame.add.tween(item.scale).to({ x:0.06, y:0.06}, 500, Phaser.Easing.Quadratic.InOut, true);
			phaserGame.add.tween(itemOutline).to({ x:finalX, y:finalY }, 500, Phaser.Easing.Quadratic.InOut, true);
			phaserGame.add.tween(itemOutline.scale).to({ x:0.06, y:0.06}, 500, Phaser.Easing.Quadratic.InOut, true);

			this.circleMenuItems.push(item);
			this.circleMenuItems.push(itemOutline);

			var text = phaserGame.add.text(x, y, text, { font: "15px Arial", fill: "#ffffff", align: "center" });
			text.scale.setTo(0.001, 0.001);
			text.anchor.setTo(0.5, 0.5);
			phaserGame.add.tween(text).to({ x:finalX, y:finalY }, 500, Phaser.Easing.Quadratic.InOut, true);
			phaserGame.add.tween(text.scale).to({ x:1, y:1}, 500, Phaser.Easing.Quadratic.InOut, true);

			this.circleMenuTexts.push(text);
		}

		this.openMenu = function(star, fleet) {
			if (this.circleMenu != null) {
				return;
			}

			var items = [];
			items.push({name:'Scan', cb:null});
			if (fleet) {
				items.push({name:'Move', cb:setMoveMode});
				items.push({name:'Dock', cb:null});
			}

			this.circleMenu = openCircleMenu(phaserGame, star.data.pos.x, star.data.pos.y, items, {});
		}

		this.closeMenu = function() {
			if (this.circleMenu == null) {
				return;
			}
			closeCircleMenu(phaserGame, this.circleMenu);
			this.circleMenu = null;
		}

		this.moveCameraTo = function(x, y) {
			var cam = phaserGame.camera;
  			cam.follow(null);
  			phaserGame.add.tween(cam).to(	{ x: x - (cam.width / 2), y: y - (cam.height / 2) }, 
  											750, Phaser.Easing.Quadratic.InOut, true );
		}

		this.update = function() {
			this.updateInput(phaserGame);

			if (this.selectedStar != null) {
				this.selectedStar.selectedUpdate();
			}

			for (var i in this.mapRender.fleets) {
				this.mapRender.fleets[i].step();
			}
    	}

    	this.updateInput = function(pgame) {
    		updateUiInput(pgame, this);
    		updateDragCamera(pgame, this);
    	}

    	this.getStarById = function(starId) {
    		for (var i in this.mapRender.stars) {
				if (this.mapRender.stars[i].data.id == starId) {
					return this.mapRender.stars[i];
				}
			}
			return null;
    	}

    	this.addFleet = function(fleetData, ship, scale, shieldScale, isLocal) {

		    var trailSegments = 10;
		    var trail = null;
		    /*var trail = new Path({
				strokeColor: fleetData.color,
				strokeWidth: this.linkWidth*2,
				strokeCap: 'square'
			});
			trail.strokeColor.alpha = 0.5;
			for (var i = 0; i <= trailSegments; i++) {
				trail.add(new Point(i , i));
			}*/

			var startStar = this.getStarById(fleetData.starId);

			var emitter = null;
			/*emitter = phaserGame.add.emitter(startStar.data.pos.x, startStar.data.pos.y, 200);
    		emitter.makeParticles('fade1');
    		emitter.particleAnchor.y = 0;
    		emitter.setXSpeed(0, 0);
    		emitter.setYSpeed(0, 0);
    		emitter.setRotation(0, 0);
    		emitter.setScale(0.03, 0.003, 0.03, 0.003, 6000, Phaser.Easing.Quintic.Out);
    		emitter.gravity = 0;
    		emitter.alpha = 0.1;
    		emitter._color = parseInt(fleetData.color, 16);*/

    		var shipObj = drawSprite(phaserGame, startStar.data.pos.x, startStar.data.pos.y, ship, {scale:scale});

			var shieldObj = null;
			if (true) {
				shieldObj = drawSprite(phaserGame, startStar.data.pos.x, startStar.data.pos.y, 'shield', {scale:shieldScale});		
			}

    		//emitter.start(false, 2000, 10);

		    var fleet = new StarmapShipController(shipObj, shieldObj, emitter, trail);
		    fleet.isLocal = isLocal;
		    fleet.data = fleetData;

		    if (startStar) {
		    	fleet.orbit(startStar.data.pos, this.fleetOrbitRadius);
				fleet.star = startStar;
		    }

			if (fleetData.dest && fleetData.dest.starId) {
				var endStar = this.getStarById(fleetData.dest.starId);
				if (endStar) {
					var points = getPoints(startStar.data.pos, endStar.data.pos, this.starRingRadius);
					var dir = diffVector2(endStar.data.pos, startStar.data.pos);
					var travelAngle = phaserGame.physics.arcade.angleBetween({x:0,y:1}, dir) / (2*Math.PI) * 360;
					fleet.warp(endStar, points[0], points[1], travelAngle, fleetData.dest.travelTime, fleetData.dest.arrivalTime);
				}
			}

		    this.mapRender.fleets.push(fleet);
    	}

    	this.addBase = function(star) {
    		var baseObj = drawSprite(phaserGame, startStar.data.pos.x, startStar.data.pos.y, 'starbase01', {scale:0.3});
		    this.mapRender.bases.push(baseObj);
    	}

    	this.requestWarpFleet = function(fleet, startStar, endStar) {
    		var self = this;
    		var startPos = startStar.data.pos;
    		var endPos = endStar.data.pos;

			jQuery.post( "/game/bridge/warpfleet", {
				fleetId:fleet.data._id,
				sid:this.sid,
				starId:endStar.data.id
			},
			function( updatedFleet ) {
				var points = getPoints(startPos, endPos, self.starRingRadius);
				var dir = diffVector2(startStar.data.pos, endStar.data.pos);
				var travelAngle = phaserGame.physics.arcade.angleBetween({x:0,y:1}, dir) / (2*Math.PI) * 360;
				fleet.warp(endStar, points[0], points[1], travelAngle, updatedFleet.dest.travelTime, updatedFleet.dest.arrivalTime);
			});
		}
	}
</script>


<div class="row">
	<div class="col-md-12">
		<div id="starmap-viewport" style="position:relative; width:<%= viewportWidth %>px;height:<%= viewportHeight %>px;">
		</div>
	</div>
</div>

<script>
	var phaserGame = null;
	var starMap = null;

	window.onload = function() {
		var startTime = new Date().getTime();

		var transparentBG = true;
		phaserGame = new Phaser.Game(<%= viewportWidth %>, <%= viewportHeight %>, Phaser.AUTO, 'starmap-viewport', 
				{ preload: preload,create:create, update:update, render:render }, transparentBG);

	    function preload () {
	    	<% 
	    	for (var i in config.starmap.starTypes) { 
	    		var starData = config.starmap.starTypes[i];
	    	%>
	        	phaserGame.load.image('<%= starData.id %>', '<%= starData.img %>');
	        <% } %>

	        phaserGame.load.image('shield', '/game/starmap/shield.png');

	        phaserGame.load.image('cargoship', '/game/starmap/cargoship.png');
	        phaserGame.load.image('frieghter', '/game/starmap/frieghter.png');
	        phaserGame.load.image('frigate', '/game/starmap/frigate.png');
	        phaserGame.load.image('pirateship', '/game/starmap/pirateship.png');
	        phaserGame.load.image('fedship', '/game/starmap/fedship.png');
	        phaserGame.load.image('particle', '/game/starmap/particle.png');
	        phaserGame.load.image('particle-cloud', '/game/starmap/particle-cloud.png');
	        phaserGame.load.image('fade1', '/game/starmap/fade1.png');

	        phaserGame.load.image('starbase01', '/game/starmap/starbase01.png');

			phaserGame.load.image('gear8', '/game/starmap/gear8.png');
			phaserGame.load.image('ring', '/game/starmap/ring.png');
			phaserGame.load.image('ringThin', '/game/starmap/ringThin.png');
			phaserGame.load.image('dashRing5', '/game/starmap/dashRing5.png');
			phaserGame.load.image('star', '/game/starmap/star.png');
	        phaserGame.load.image('hex', '/game/starmap/hex.png');
	        phaserGame.load.image('outlineHex', '/game/starmap/outlineHex.png');
	    }

	    function create () {

	    	phaserGame.world.setBounds(0, 0, config.starmap.width, config.starmap.height);
	    	cursors = phaserGame.input.keyboard.createCursorKeys();
	    	phaserGame.input.addPointer();

	        starMap = new StarMap();

	        //My fleet
			starMap.addFleet(<%= JSON.stringify(fleet) %>, 'frieghter', 0.4, 0.6, true);

			for (var i in starMap.mapRender.stars) {
				var star = starMap.mapRender.stars[i];
				if (star.isCapital && (star.faction.fName == 'Pirates')) {
					var data = {sid:0, starId:star.data.id}
					starMap.addFleet(data, 'pirateship', 0.4, 0.6, false);
				}
				else if (star.isCapital && (star.faction.fName == 'Feds')) {
					var data = {sid:0, starId:star.data.id}
					starMap.addFleet(data, 'fedship', 0.4, 0.6, false);
					//starMap.addBase(star);
				}
			}

			//alert("load took " + (new Date().getTime() - startTime) + "ms");
	    }

	    function update() {
		    if (cursors.up.isDown)
	        {
	        	//phaserGame.camera.y -= 4;
	            phaserGame.camera.scale.x -= 0.01;
	            phaserGame.camera.scale.y -= 0.01;
	        }
	        else if (cursors.down.isDown)
	        {
	        	//phaserGame.camera.y += 4;
	            phaserGame.camera.scale.x += 0.01;
	            phaserGame.camera.scale.y += 0.01;
	        }

	        if (cursors.left.isDown)
	        {
	            phaserGame.camera.x -= 4;
	        }
	        else if (cursors.right.isDown)
	        {
	            phaserGame.camera.x += 4;
	        }

	        starMap.update();
		}

		function render() {
			for (var i in starMap.mapRender.links) {
				phaserGame.debug.geom(starMap.mapRender.links[i]);
			}
		}

	}

	window.onunload = function() {
       console.log("onunload");
    }
</script>